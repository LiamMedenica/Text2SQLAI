{"input": "translate to SQL: How many singers do we have? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT count(*) FROM singer"}
{"input": "translate to SQL: What is the total number of singers? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT count(*) FROM singer"}
{"input": "translate to SQL: Show name, country, age for all singers ordered by age from the oldest to the youngest. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"input": "translate to SQL: What are the names, countries, and ages for every singer in descending order of age? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"}
{"input": "translate to SQL: What is the average, minimum, and maximum age of all singers from France? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"input": "translate to SQL: What is the average, minimum, and maximum age for all French singers? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}
{"input": "translate to SQL: Show the name and the release year of the song by the youngest singer. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"input": "translate to SQL: What are the names and release years for all the songs of the youngest singer? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}
{"input": "translate to SQL: What are all distinct countries where singers above age 20 are from? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"input": "translate to SQL: What are  the different countries with singers above age 20? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT DISTINCT country FROM singer WHERE age  >  20"}
{"input": "translate to SQL: Show all countries and the number of singers in each country. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"input": "translate to SQL: How many singers are from each country? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT country ,  count(*) FROM singer GROUP BY country"}
{"input": "translate to SQL: List all song names by singers above the average age. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"input": "translate to SQL: What are all the song names by singers who are older than average? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"}
{"input": "translate to SQL: Show location and name for all stadiums with a capacity between 5000 and 10000. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"input": "translate to SQL: What are the locations and names of all stations with capacity between 5000 and 10000? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}
{"input": "translate to SQL: What is the maximum capacity and the average of all stadiums ? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select max(capacity), average from stadium"}
{"input": "translate to SQL: What is the average and maximum capacities for all stadiums ? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select avg(capacity) ,  max(capacity) from stadium"}
{"input": "translate to SQL: What is the name and capacity for the stadium with highest average attendance? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"input": "translate to SQL: What is the name and capacity for the stadium with the highest average attendance? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}
{"input": "translate to SQL: How many concerts are there in year 2014 or 2015? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}
{"input": "translate to SQL: How many concerts occurred in 2014 or 2015? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"}
{"input": "translate to SQL: Show the stadium name and the number of concerts in each stadium. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"}
{"input": "translate to SQL: For each stadium, how many concerts play there? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"}
{"input": "translate to SQL: Show the stadium name and capacity with most number of concerts in year 2014 or after. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name and capacity of the stadium with the most concerts after 2013 ? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"}
{"input": "translate to SQL: Which year has most number of concerts? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the year that had the most concerts? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show the stadium names without any concert. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"}
{"input": "translate to SQL: What are the names of the stadiums without any concerts? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"}
{"input": "translate to SQL: Show countries where a singer above age 40 and a singer below 30 are from. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"}
{"input": "translate to SQL: Show names for all stadiums except for stadiums having a concert in year 2014. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"}
{"input": "translate to SQL: What are the names of all stadiums that did not have a concert in 2014? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"}
{"input": "translate to SQL: Show the name and theme for all concerts and the number of singers in each concert. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"}
{"input": "translate to SQL: What are the names , themes , and number of singers for every concert ? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"}
{"input": "translate to SQL: List singer names and number of concerts for each singer. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"}
{"input": "translate to SQL: What are the names of the singers and number of concerts for each person? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"}
{"input": "translate to SQL: List all singer names in concerts in year 2014. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}
{"input": "translate to SQL: What are the names of the singers who performed in a concert in 2014? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}
{"input": "translate to SQL: what is the name and nation of the singer who have a song having 'Hey' in its name? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"input": "translate to SQL: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}
{"input": "translate to SQL: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"}
{"input": "translate to SQL: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"}
{"input": "translate to SQL: Find the number of concerts happened in the stadium with the highest capacity . | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"}
{"input": "translate to SQL: What are the number of concerts that occurred in the stadium with the largest capacity ? | DB: concert_singer | Tables: stadium, singer, concert, singer in concert | Columns: stadium.Stadium_ID, stadium.Location, stadium.Name, stadium.Capacity, stadium.Highest, stadium.Lowest, stadium.Average, singer.Singer_ID, singer.Name, singer.Country, singer.Song_Name, singer.Song_release_year, singer.Age, singer.Is_male, concert.concert_ID, concert.concert_Name, concert.Theme, concert.Stadium_ID, concert.Year, singer_in_concert.concert_ID, singer_in_concert.Singer_ID", "target": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"}
{"input": "translate to SQL: Find the number of pets whose weight is heavier than 10. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"input": "translate to SQL: How many pets have a greater weight than 10? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM pets WHERE weight  >  10"}
{"input": "translate to SQL: Find the weight of the youngest dog. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"input": "translate to SQL: How much does the youngest dog weigh? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}
{"input": "translate to SQL: Find the maximum weight for each type of pet. List the maximum weight and pet type. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"input": "translate to SQL: List the maximum weight and type for each type of pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"}
{"input": "translate to SQL: Find number of pets owned by students who are older than 20. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"input": "translate to SQL: How many pets are owned by students that have an age greater than 20? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}
{"input": "translate to SQL: Find the number of dog pets that are raised by female students (with sex F). | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"input": "translate to SQL: How many dog pets are raised by female students? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}
{"input": "translate to SQL: Find the number of distinct type of pets. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(DISTINCT pettype) FROM pets"}
{"input": "translate to SQL: How many different types of pet are there? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(DISTINCT pettype) FROM pets"}
{"input": "translate to SQL: Find the first name of students who have cat or dog pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"input": "translate to SQL: What are the first names of every student who has a cat or dog as a pet? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"}
{"input": "translate to SQL: Find the first name of students who have both cat and dog pets . | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"}
{"input": "translate to SQL: What are the students' first names who have both cats and dogs as pets? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"}
{"input": "translate to SQL: Find the major and age of students who do not have a cat pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"input": "translate to SQL: What major is every student who does not own a cat as a pet, and also how old are they? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"input": "translate to SQL: Find the id of students who do not have a cat pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"input": "translate to SQL: What are the ids of the students who do not own cats as pets? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"}
{"input": "translate to SQL: Find the first name and age of students who have a dog but do not have a cat as a pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"input": "translate to SQL: What is the first name of every student who has a dog but does not have a cat? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"}
{"input": "translate to SQL: Find the type and weight of the youngest pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"input": "translate to SQL: What type of pet is the youngest animal, and how much does it weigh? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}
{"input": "translate to SQL: Find the id and weight of all pets whose age is older than 1. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"input": "translate to SQL: What is the id and weight of every pet who is older than 1? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}
{"input": "translate to SQL: Find the average and maximum age for each type of pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"input": "translate to SQL: What is the average and maximum age for each pet type? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"}
{"input": "translate to SQL: Find the average weight for each pet type. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"input": "translate to SQL: What is the average weight for each type of pet? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"}
{"input": "translate to SQL: Find the first name and age of students who have a pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"input": "translate to SQL: What are the different first names and ages of the students who do have pets? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}
{"input": "translate to SQL: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"input": "translate to SQL: What is the id of the pet owned by the student whose last name is 'Smith'? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"}
{"input": "translate to SQL: Find the number of pets for each student who has any pet and student id. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"}
{"input": "translate to SQL: For students who have pets , how many pets does each student have ? list their ids instead of names . | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"}
{"input": "translate to SQL: Find the first name and gender of student who have more than one pet. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"input": "translate to SQL: What is the first name and gender of the all the students who have more than one pet? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"}
{"input": "translate to SQL: Find the last name of the student who has a cat that is age 3. | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"input": "translate to SQL: What is the last name of the student who has a cat that is 3 years old? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}
{"input": "translate to SQL: Find the average age of students who do not have any pet . | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"input": "translate to SQL: What is the average age for all students who do not own any pets ? | DB: pets_1 | Tables: student, has pet, pets | Columns: Student.StuID, Student.LName, Student.Fname, Student.Age, Student.Sex, Student.Major, Student.Advisor, Student.city_code, Has_Pet.StuID, Has_Pet.PetID, Pets.PetID, Pets.PetType, Pets.pet_age, Pets.weight", "target": "select avg(age) from student where stuid not in (select stuid from has_pet)"}
{"input": "translate to SQL: How many continents are there? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CONTINENTS;"}
{"input": "translate to SQL: What is the number of continents? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CONTINENTS;"}
{"input": "translate to SQL: How many countries does each continent have? List the continent id, continent name and the number of countries. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"input": "translate to SQL: For each continent, list its id, name, and how many countries it has? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}
{"input": "translate to SQL: How many countries are listed? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM COUNTRIES;"}
{"input": "translate to SQL: How many countries exist? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM COUNTRIES;"}
{"input": "translate to SQL: How many models does each car maker produce? List maker full name, id and the number. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"input": "translate to SQL: What is the full name of each car maker, along with its id and how many models it produces? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}
{"input": "translate to SQL: Which model of the car has the minimum horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"input": "translate to SQL: What is the model of the car with the smallest amount of horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}
{"input": "translate to SQL: Find the model of the car whose weight is below the average weight. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"input": "translate to SQL: What is the model for the car with a weight smaller than the average? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"}
{"input": "translate to SQL: Find the name of the makers that produced some cars in the year of 1970? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"input": "translate to SQL: What is the name of the different car makers who produced a car in 1970? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}
{"input": "translate to SQL: Find the make and production time of the cars that were produced in the earliest year? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"input": "translate to SQL: What is the maker of the carr produced in the earliest year and what year was it? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}
{"input": "translate to SQL: Which distinct car models are the produced after 1980? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"input": "translate to SQL: What are the different models for the cards produced after 1980? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}
{"input": "translate to SQL: How many car makers are there in each continents? List the continent name and the count. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}
{"input": "translate to SQL: What is the name of each continent and how many car makers are there in each one? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}
{"input": "translate to SQL: Which of the countries has the most car makers? List the country name. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: What is the name of the country with the most car makers? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: How many car models are produced by each maker ? Only list the count and the maker full name . | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}
{"input": "translate to SQL: What is the number of car models that are produced by each maker and what is the id and full name of each maker? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}
{"input": "translate to SQL: What is the accelerate of the car make amc hornet sportabout (sw)? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"input": "translate to SQL: How much does the car accelerate that makes amc hornet sportabout (sw)? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}
{"input": "translate to SQL: How many car makers are there in france? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}
{"input": "translate to SQL: What is the number of makers of care in France? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"}
{"input": "translate to SQL: How many car models are produced in the usa? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}
{"input": "translate to SQL: What is the count of the car models produced in the United States? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"}
{"input": "translate to SQL: What is the average miles per gallon(mpg) of the cars with 4 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}
{"input": "translate to SQL: What is the average miles per gallon of all the cards with 4 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}
{"input": "translate to SQL: What is the smallest weight of the car produced with 8 cylinders on 1974 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"input": "translate to SQL: What is the minimum weight of the car with 8 cylinders produced in 1974 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}
{"input": "translate to SQL: What are all the makers and models? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"input": "translate to SQL: What are the makers and models? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT Maker ,  Model FROM MODEL_LIST;"}
{"input": "translate to SQL: What are the countries having at least one car maker? List name and id. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}
{"input": "translate to SQL: What are the names and ids of all countries with at least one car maker? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}
{"input": "translate to SQL: What is the number of the cars with horsepower more than 150? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}
{"input": "translate to SQL: What is the number of cars with a horsepower greater than 150? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}
{"input": "translate to SQL: What is the average weight of cars each year? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"input": "translate to SQL: What is the average weight and year for each year? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}
{"input": "translate to SQL: Which countries in europe have at least 3 car manufacturers? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}
{"input": "translate to SQL: What are the names of all European countries with at least 3 manufacturers? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}
{"input": "translate to SQL: What is the maximum horsepower and the make of the car models with 3 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"input": "translate to SQL: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"input": "translate to SQL: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}
{"input": "translate to SQL: What is the car model with the highest mpg ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}
{"input": "translate to SQL: What is the average horsepower of the cars before 1980? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"}
{"input": "translate to SQL: What is the average horsepower for all cars produced before 1980 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select avg(horsepower) from cars_data where year  <  1980;"}
{"input": "translate to SQL: What is the average edispl of the cars of model volvo? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"input": "translate to SQL: What is the average edispl for all volvos? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}
{"input": "translate to SQL: What is the maximum accelerate for different number of cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"input": "translate to SQL: What is the maximum accelerate for all the different cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}
{"input": "translate to SQL: Which model has the most version(make) of cars? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: What model has the most different versions? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: How many cars have more than 4 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"input": "translate to SQL: What is the number of cars with more than 4 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}
{"input": "translate to SQL: how many cars were produced in 1980? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"input": "translate to SQL: In 1980, how many cars were made? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}
{"input": "translate to SQL: How many car models were produced by the maker with full name American Motor Company? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"input": "translate to SQL: What is the number of car models created by the car maker American Motor Company? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"}
{"input": "translate to SQL: Which makers designed more than 3 car models? List full name and the id. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"input": "translate to SQL: What are the names and ids of all makers with more than 3 models? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}
{"input": "translate to SQL: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"input": "translate to SQL: What are the different models created by either the car maker General Motors or weighed more than 3500? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}
{"input": "translate to SQL: In which years cars were produced weighing no less than 3000 and no more than 4000 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"input": "translate to SQL: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select distinct year from cars_data where weight between 3000 and 4000;"}
{"input": "translate to SQL: What is the horsepower of the car with the largest accelerate? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"input": "translate to SQL: What is the horsepower of the car with the greatest accelerate? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}
{"input": "translate to SQL: For model volvo, how many cylinders does the car with the least accelerate have? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"input": "translate to SQL: For a volvo model, how many cylinders does the version with least accelerate have? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}
{"input": "translate to SQL: How many cars have a larger accelerate than the car with the largest horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"input": "translate to SQL: What is the number of cars with a greater accelerate than the one with the most horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}
{"input": "translate to SQL: How many countries has more than 2 car makers ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}
{"input": "translate to SQL: What is the number of countries with more than 2 car makers ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"}
{"input": "translate to SQL: How many cars has over 6 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"input": "translate to SQL: What is the number of carsw ith over 6 cylinders? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}
{"input": "translate to SQL: For the cars with 4 cylinders, which model has the largest horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"input": "translate to SQL: For all of the 4 cylinder cars, which model has the most horsepower? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}
{"input": "translate to SQL: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}
{"input": "translate to SQL: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}
{"input": "translate to SQL: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"input": "translate to SQL: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"}
{"input": "translate to SQL: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"input": "translate to SQL: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}
{"input": "translate to SQL: What are the name of the countries where there is not a single car maker? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}
{"input": "translate to SQL: What are the names of the countries with no car makers? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}
{"input": "translate to SQL: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}
{"input": "translate to SQL: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}
{"input": "translate to SQL: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"}
{"input": "translate to SQL: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? | DB: car_1 | Tables: continents, countries, car makers, model list, car names, cars data | Columns: continents.ContId, continents.Continent, countries.CountryId, countries.CountryName, countries.Continent, car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country, model_list.ModelId, model_list.Maker, model_list.Model, car_names.MakeId, car_names.Model, car_names.Make, cars_data.Id, cars_data.MPG, cars_data.Cylinders, cars_data.Edispl, cars_data.Horsepower, cars_data.Weight, cars_data.Accelerate, cars_data.Year", "target": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"}
{"input": "translate to SQL: Which country does Airline \"JetBlue Airways\" belong to? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"input": "translate to SQL: What country is Jetblue Airways affiliated with? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"input": "translate to SQL: What is the abbreviation of Airline \"JetBlue Airways\"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"input": "translate to SQL: Which abbreviation corresponds to Jetblue Airways? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}
{"input": "translate to SQL: List all airline names and their abbreviations in \"USA\". | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}
{"input": "translate to SQL: What are the airline names and abbreviations for airlines in the USA? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}
{"input": "translate to SQL: List the airport code and name in the city of Anthony. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}
{"input": "translate to SQL: Give the airport code and airport name corresonding to the city Anthony. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}
{"input": "translate to SQL: How many airlines do we have? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES"}
{"input": "translate to SQL: What is the total number of airlines? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES"}
{"input": "translate to SQL: How many airports do we have? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRPORTS"}
{"input": "translate to SQL: Return the number of  airports. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRPORTS"}
{"input": "translate to SQL: How many flights do we have? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS"}
{"input": "translate to SQL: Return the number of flights. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS"}
{"input": "translate to SQL: Which airline has abbreviation 'UAL'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}
{"input": "translate to SQL: Give the airline with abbreviation 'UAL'. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}
{"input": "translate to SQL: How many airlines are from USA? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}
{"input": "translate to SQL: Return the number of airlines in the USA. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}
{"input": "translate to SQL: Which city and country is the Alton airport at? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}
{"input": "translate to SQL: Give the city and country for the Alton airport. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}
{"input": "translate to SQL: What is the airport name for airport 'AKO'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}
{"input": "translate to SQL: Return the name of the airport with code 'AKO'. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}
{"input": "translate to SQL: What are airport names at City 'Aberdeen'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}
{"input": "translate to SQL: What are the names of airports in Aberdeen? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}
{"input": "translate to SQL: How many flights depart from 'APG'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"input": "translate to SQL: Count the number of flights departing from 'APG'. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"input": "translate to SQL: How many flights have destination ATO? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}
{"input": "translate to SQL: Count the number of flights into ATO. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}
{"input": "translate to SQL: How many flights depart from City Aberdeen? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: Return the number of flights departing from Aberdeen. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: How many flights arriving in Aberdeen city? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: Return the number of flights arriving in Aberdeen. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}
{"input": "translate to SQL: How many flights fly from Aberdeen to Ashley? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""}
{"input": "translate to SQL: How many flights does airline 'JetBlue Airways' have? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}
{"input": "translate to SQL: Give the number of Jetblue Airways flights. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}
{"input": "translate to SQL: How many 'United Airlines' flights go to Airport 'ASY'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}
{"input": "translate to SQL: Count the number of United Airlines flights arriving in ASY Airport. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}
{"input": "translate to SQL: How many 'United Airlines' flights depart from Airport 'AHD'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}
{"input": "translate to SQL: Return the number of United Airlines flights leaving from AHD Airport. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}
{"input": "translate to SQL: How many United Airlines flights go to City 'Aberdeen'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}
{"input": "translate to SQL: Count the number of United Airlines flights that arrive in Aberdeen. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}
{"input": "translate to SQL: Which city has most number of arriving flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which city has the most frequent destination airport? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which city has most number of departing flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which city is the most frequent source airport? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the code of airport that has the highest number of flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the airport code of the airport with the most flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the code of airport that has fewest number of flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"input": "translate to SQL: Give the code of the airport with the least flights. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"}
{"input": "translate to SQL: Which airline has most number of flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What airline serves the most flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the abbreviation and country of the airline that has fewest number of flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"}
{"input": "translate to SQL: What is the abbreviation of the airilne has the fewest flights and what country is it in? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"}
{"input": "translate to SQL: What are airlines that have some flight departing from airport 'AHD'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}
{"input": "translate to SQL: Which airlines have a flight with source airport AHD? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}
{"input": "translate to SQL: What are airlines that have flights arriving at airport 'AHD'? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}
{"input": "translate to SQL: Which airlines have a flight with destination airport AHD? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}
{"input": "translate to SQL: Find all airlines that have flights from both airports 'APG' and 'CVO'. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""}
{"input": "translate to SQL: Which airlines have departing flights from both APG and CVO airports? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""}
{"input": "translate to SQL: Find all airlines that have flights from airport 'CVO' but not from 'APG'. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""}
{"input": "translate to SQL: Which airlines have departures from CVO but not from APG airports? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""}
{"input": "translate to SQL: Find all airlines that have at least 10 flights. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"input": "translate to SQL: Which airlines have at least 10 flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"}
{"input": "translate to SQL: Find all airlines that have fewer than 200 flights. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"input": "translate to SQL: Which airlines have less than 200 flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"}
{"input": "translate to SQL: What are flight numbers of Airline \"United Airlines\"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}
{"input": "translate to SQL: Which flight numbers correspond to United Airlines flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}
{"input": "translate to SQL: What are flight numbers of flights departing from Airport \"APG\"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"input": "translate to SQL: Give the flight numbers of flights leaving from APG. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}
{"input": "translate to SQL: What are flight numbers of flights arriving at Airport \"APG\"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}
{"input": "translate to SQL: Give the flight numbers of flights landing at APG. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}
{"input": "translate to SQL: What are flight numbers of flights departing from City \"Aberdeen \"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: Give the flight numbers of flights leaving from Aberdeen. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: What are flight numbers of flights arriving at City \"Aberdeen\"? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: Give the flight numbers of flights arriving in Aberdeen. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}
{"input": "translate to SQL: Find the number of flights landing in the city of Aberdeen or Abilene. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""}
{"input": "translate to SQL: How many flights land in Aberdeen or Abilene? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""}
{"input": "translate to SQL: Find the name of airports which do not have any flight in and out. | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"input": "translate to SQL: Which airports do not have departing or arriving flights? | DB: flight_2 | Tables: airlines, airports, flights | Columns: airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country, airports.City, airports.AirportCode, airports.AirportName, airports.Country, airports.CountryAbbrev, flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport", "target": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"}
{"input": "translate to SQL: How many employees are there? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) FROM employee"}
{"input": "translate to SQL: Count the number of employees | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) FROM employee"}
{"input": "translate to SQL: Sort employee names by their age in ascending order. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM employee ORDER BY age"}
{"input": "translate to SQL: List the names of employees and sort in ascending order of age. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM employee ORDER BY age"}
{"input": "translate to SQL: What is the number of employees from each city? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"input": "translate to SQL: Count the number of employees for each city. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  city FROM employee GROUP BY city"}
{"input": "translate to SQL: Which cities do more than one employee under age 30 come from? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"input": "translate to SQL: Find the cities that have more than one employee under age 30. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"}
{"input": "translate to SQL: Find the number of shops in each location. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"input": "translate to SQL: How many shops are there in each location? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"}
{"input": "translate to SQL: Find the manager name and district of the shop whose number of products is the largest. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"input": "translate to SQL: What are the manager name and district of the shop that sells the largest number of products? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}
{"input": "translate to SQL: find the minimum and maximum number of products of all stores. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"input": "translate to SQL: What are the minimum and maximum number of products across all the shops? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}
{"input": "translate to SQL: Return the name, location and district of all shops in descending order of number of products. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"input": "translate to SQL: Sort all the shops by number products in descending order, and return the name, location and district of each shop. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"}
{"input": "translate to SQL: Find the names of stores whose number products is more than the average number of products. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"input": "translate to SQL: Which shops' number products is above the average? Give me the shop names. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"}
{"input": "translate to SQL: find the name of employee who was awarded the most times in the evaluation. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which employee received the most awards in evaluations? Give me the employee name. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the name of the employee who got the highest one time bonus. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}
{"input": "translate to SQL: Which employee received the biggest bonus? Give me the employee name. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}
{"input": "translate to SQL: Find the names of employees who never won any award in the evaluation. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}
{"input": "translate to SQL: What are the names of the employees who never received any evaluation? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"}
{"input": "translate to SQL: What is the name of the shop that is hiring the largest number of employees? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which shop has the most employees? Give me the shop name. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the name of the shops that do not hire any employee. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"input": "translate to SQL: Which shops run with no employees? Find the shop names | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"}
{"input": "translate to SQL: Find the number of employees hired in each shop; show the shop name as well. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"input": "translate to SQL: For each shop, return the number of employees working there and the name of the shop. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"}
{"input": "translate to SQL: What is total bonus given in all evaluations? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT sum(bonus) FROM evaluation"}
{"input": "translate to SQL: Find the total amount of bonus given in all the evaluations. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT sum(bonus) FROM evaluation"}
{"input": "translate to SQL: Give me all the information about hiring. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT * FROM hiring"}
{"input": "translate to SQL: What is all the information about hiring? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT * FROM hiring"}
{"input": "translate to SQL: Which district has both stores with less than 3000 products and stores with more than 10000 products? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"input": "translate to SQL: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"}
{"input": "translate to SQL: How many different store locations are there? | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"input": "translate to SQL: Count the number of distinct store locations. | DB: employee_hire_evaluation | Tables: employee, shop, hiring, evaluation | Columns: employee.Employee_ID, employee.Name, employee.Age, employee.City, shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name, hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time, evaluation.Employee_ID, evaluation.Year_awarded, evaluation.Bonus", "target": "SELECT count(DISTINCT LOCATION) FROM shop"}
{"input": "translate to SQL: How many documents do we have? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Documents"}
{"input": "translate to SQL: Count the number of documents. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Documents"}
{"input": "translate to SQL: List document IDs, document names, and document descriptions for all documents. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"input": "translate to SQL: What are the ids, names, and descriptions for all documents? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  document_name ,  document_description FROM Documents"}
{"input": "translate to SQL: What is the document name and template id for document with description with the letter 'w' in it? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}
{"input": "translate to SQL: Return the names and template ids for documents that contain the letter w in their description. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}
{"input": "translate to SQL: What is the document id, template id and description for document named \"Robbin CV\"? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"input": "translate to SQL: Return the document id, template id, and description for the document with the name Robbin CV. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}
{"input": "translate to SQL: How many different templates do all document use? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(DISTINCT template_id) FROM Documents"}
{"input": "translate to SQL: Count the number of different templates used for documents. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(DISTINCT template_id) FROM Documents"}
{"input": "translate to SQL: How many documents are using the template with type code 'PPT'? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"input": "translate to SQL: Count the number of documents that use the PPT template type. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"}
{"input": "translate to SQL: Show all template ids and number of documents using each template. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"input": "translate to SQL: What are all different template ids used for documents, and how many times were each of them used? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"}
{"input": "translate to SQL: What is the id and type code for the template used by the most documents? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the id and type code of the template that is used for the greatest number of documents. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show ids for all templates that are used by more than one document. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"input": "translate to SQL: What are the template ids of any templates used in more than a single document? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"}
{"input": "translate to SQL: Show ids for all templates not used by any document. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"input": "translate to SQL: What are the ids for templates that are not used in any documents? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"}
{"input": "translate to SQL: How many templates do we have? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Templates"}
{"input": "translate to SQL: Count the number of templates. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Templates"}
{"input": "translate to SQL: Show template ids, version numbers, and template type codes for all templates. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"input": "translate to SQL: What are the ids, version numbers, and type codes for each template? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}
{"input": "translate to SQL: Show all distinct template type codes for all templates. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT DISTINCT template_type_code FROM Templates"}
{"input": "translate to SQL: What are the different template type codes? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT DISTINCT template_type_code FROM Templates"}
{"input": "translate to SQL: What are the ids of templates with template type code PP or PPT? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""}
{"input": "translate to SQL: Return the ids of templates that have the code PP or PPT. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""}
{"input": "translate to SQL: How many templates have template type code CV? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}
{"input": "translate to SQL: Count the number of templates of the type CV. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""}
{"input": "translate to SQL: What is the version number and template type code for the template with version number later than 5? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"input": "translate to SQL: Return the version numbers and template type codes of templates with a version number greater than 5. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}
{"input": "translate to SQL: Show all template type codes and number of templates for each. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"input": "translate to SQL: What are the different template type codes, and how many templates correspond to each? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"}
{"input": "translate to SQL: Which template type code has most number of templates? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the type code of the template type that the most templates belong to. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show all template type codes with less than three templates. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"input": "translate to SQL: What are the codes of template types that have fewer than 3 templates? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"}
{"input": "translate to SQL: What the smallest version number and its template type code? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}
{"input": "translate to SQL: Return the lowest version number, along with its corresponding template type code. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}
{"input": "translate to SQL: What is the template type code of the template used by document with the name \"Data base\"? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}
{"input": "translate to SQL: Return the template type code of the template that is used by a document named Data base. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}
{"input": "translate to SQL: Show all document names using templates with template type code BK. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}
{"input": "translate to SQL: What are the names of documents that use templates with the code BK? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""}
{"input": "translate to SQL: Show all template type codes and the number of documents using each type. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"input": "translate to SQL: What are the different template type codes, and how many documents use each type? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"}
{"input": "translate to SQL: Which template type code is used by most number of documents? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the code of the template type that is most commonly used in documents. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show all template type codes that are not used by any document. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"input": "translate to SQL: What are the codes of template types that are not used for any document? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"}
{"input": "translate to SQL: Show all template type codes and descriptions. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"input": "translate to SQL: What are the type codes and descriptions for all template types? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}
{"input": "translate to SQL: What is the template type descriptions for template type code \"AD\". | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}
{"input": "translate to SQL: Return the template type description of the template type with the code AD. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""}
{"input": "translate to SQL: What is the template type code for template type description \"Book\". | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}
{"input": "translate to SQL: Return the type code of the template type with the description \"Book\". | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}
{"input": "translate to SQL: What are the distinct template type descriptions for the templates ever used by any document? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"input": "translate to SQL: Return the different descriptions for templates that have been used in a document. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}
{"input": "translate to SQL: What are the template ids with template type description \"Presentation\". | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}
{"input": "translate to SQL: Return the ids corresponding to templates with the description 'Presentation'. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}
{"input": "translate to SQL: How many paragraphs in total? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Paragraphs"}
{"input": "translate to SQL: Count the number of paragraphs. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Paragraphs"}
{"input": "translate to SQL: How many paragraphs for the document with name 'Summer Show'? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"input": "translate to SQL: Count the number of paragraphs in the document named 'Summer Show'. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}
{"input": "translate to SQL: Show paragraph details for paragraph with text 'Korea ' . | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"input": "translate to SQL: What are the details for the paragraph that includes the text 'Korea ' ? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "select other_details from paragraphs where paragraph_text like 'korea'"}
{"input": "translate to SQL: Show all paragraph ids and texts for the document with name 'Welcome to NY'. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"input": "translate to SQL: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}
{"input": "translate to SQL: Show all paragraph texts for the document \"Customer reviews\". | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}
{"input": "translate to SQL: What are the paragraph texts for the document with the name 'Customer reviews'? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}
{"input": "translate to SQL: Show all document ids and the number of paragraphs in each document. Order by document id. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"input": "translate to SQL: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"}
{"input": "translate to SQL: Show all document ids, names and the number of paragraphs in each document. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}
{"input": "translate to SQL: What are the ids and names of each document, as well as the number of paragraphs in each? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"}
{"input": "translate to SQL: List all document ids with at least two paragraphs. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What are the ids of documents that have 2 or more paragraphs? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What is the document id and name with greatest number of paragraphs? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the id and name of the document with the most paragraphs. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the document id with least number of paragraphs? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}
{"input": "translate to SQL: Return the id of the document with the fewest paragraphs. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"}
{"input": "translate to SQL: What is the document id with 1 to 2 paragraphs? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}
{"input": "translate to SQL: Give the ids of documents that have between one and two paragraphs. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"}
{"input": "translate to SQL: Show the document id with paragraph text 'Brazil' and 'Ireland'. | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}
{"input": "translate to SQL: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? | DB: cre_Doc_Template_Mgt | Tables: reference template types, templates, documents, paragraphs | Columns: Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details, Documents.Document_ID, Documents.Template_ID, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details, Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details", "target": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"}
{"input": "translate to SQL: How many teachers are there? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT count(*) FROM teacher"}
{"input": "translate to SQL: What is the total count of teachers? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT count(*) FROM teacher"}
{"input": "translate to SQL: List the names of teachers in ascending order of age. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"input": "translate to SQL: What are the names of the teachers ordered by ascending age? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher ORDER BY Age ASC"}
{"input": "translate to SQL: What are the age and hometown of teachers? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Age ,  Hometown FROM teacher"}
{"input": "translate to SQL: What is the age and hometown of every teacher? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Age ,  Hometown FROM teacher"}
{"input": "translate to SQL: List the name of teachers whose hometown is not `` Little Lever Urban District '' . | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "select name from teacher where hometown != \"little lever urban district\""}
{"input": "translate to SQL: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "select name from teacher where hometown != \"little lever urban district\""}
{"input": "translate to SQL: Show the name of teachers aged either 32 or 33? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"}
{"input": "translate to SQL: What are the names of the teachers who are aged either 32 or 33? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"}
{"input": "translate to SQL: What is the hometown of the youngest teacher? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}
{"input": "translate to SQL: Where is the youngest teacher from? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}
{"input": "translate to SQL: Show different hometown of teachers and the number of teachers from each hometown. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}
{"input": "translate to SQL: For each hometown, how many teachers are there? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"}
{"input": "translate to SQL: List the most common hometown of teachers. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the most commmon hometowns for teachers? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show the hometowns shared by at least two teachers. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: What are the towns from which at least two teachers come from? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: Show names of teachers and the courses they are arranged to teach. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}
{"input": "translate to SQL: What is the name of each teacher and what course they teach? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}
{"input": "translate to SQL: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}
{"input": "translate to SQL: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"}
{"input": "translate to SQL: Show the name of the teacher for the math course. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}
{"input": "translate to SQL: What are the names of the people who teach math courses? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}
{"input": "translate to SQL: Show names of teachers and the number of courses they teach. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}
{"input": "translate to SQL: What are the names of the teachers and how many courses do they teach? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"}
{"input": "translate to SQL: Show names of teachers that teach at least two courses. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: What are the names of the teachers who teach at least two courses? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: List the names of teachers who have not been arranged to teach courses. | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}
{"input": "translate to SQL: What are the names of the teachers whose courses have not been arranged? | DB: course_teach | Tables: course, teacher, course arrange | Columns: course.Course_ID, course.Staring_Date, course.Course, teacher.Teacher_ID, teacher.Name, teacher.Age, teacher.Hometown, course_arrange.Course_ID, course_arrange.Teacher_ID, course_arrange.Grade", "target": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"}
{"input": "translate to SQL: How many visitors below age 30 are there? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT count(*) FROM visitor WHERE age  <  30"}
{"input": "translate to SQL: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"}
{"input": "translate to SQL: What is the average age of the visitors whose membership level is not higher than 4? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}
{"input": "translate to SQL: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"}
{"input": "translate to SQL: Find the id and name of the museum that has the most staff members? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}
{"input": "translate to SQL: Find the average number of staff working for the museums that were open before 2009. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}
{"input": "translate to SQL: What are the opening year and staff number of the museum named Plaza Museum? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}
{"input": "translate to SQL: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"}
{"input": "translate to SQL: find the id, name and age for visitors who visited some museums more than once. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"}
{"input": "translate to SQL: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"}
{"input": "translate to SQL: What are the id and name of the museum visited most times? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the museum that had no visitor yet? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"}
{"input": "translate to SQL: Find the name and age of the visitor who bought the most tickets at once. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}
{"input": "translate to SQL: What are the average and maximum number of tickets bought in all visits? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}
{"input": "translate to SQL: What is the total ticket expense of the visitors whose membership level is 1? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}
{"input": "translate to SQL: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"}
{"input": "translate to SQL: Find the number of visitors who did not visit any museum opened after 2010. | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"}
{"input": "translate to SQL: How many museums were opened after 2013 or before 2008? | DB: museum_visit | Tables: museum, customer, visit | Columns: museum.Museum_ID, museum.Name, museum.Num_of_Staff, museum.Open_Year, visitor.ID, visitor.Name, visitor.Level_of_membership, visitor.Age, visit.Museum_ID, visit.visitor_ID, visit.Num_of_Ticket, visit.Total_spent", "target": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"}
{"input": "translate to SQL: Find the total number of players. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM players"}
{"input": "translate to SQL: How many players are there? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM players"}
{"input": "translate to SQL: Find the total number of matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM matches"}
{"input": "translate to SQL: Count the number of matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM matches"}
{"input": "translate to SQL: List the first name and birth date of all players from the country with code USA. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"input": "translate to SQL: What are the first names and birth dates of players from the USA? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}
{"input": "translate to SQL: Find the average age of losers and winners of all matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"input": "translate to SQL: What are the average ages of losers and winners across matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}
{"input": "translate to SQL: Find the average rank of winners in all matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(winner_rank) FROM matches"}
{"input": "translate to SQL: What is the average rank for winners in all matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(winner_rank) FROM matches"}
{"input": "translate to SQL: Find the highest rank of losers in all matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT min(loser_rank) FROM matches"}
{"input": "translate to SQL: What is the best rank of losers across all matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT min(loser_rank) FROM matches"}
{"input": "translate to SQL: find the number of distinct country codes of all players. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT country_code) FROM players"}
{"input": "translate to SQL: How many distinct countries do players come from? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT country_code) FROM players"}
{"input": "translate to SQL: Find the number of distinct name of losers. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT loser_name) FROM matches"}
{"input": "translate to SQL: How many different loser names are there? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT loser_name) FROM matches"}
{"input": "translate to SQL: Find the name of tourney that has more than 10 matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"input": "translate to SQL: What are the names of tournaments that have more than 10 matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"}
{"input": "translate to SQL: List the names of all winners who played in both 2013 and 2016. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}
{"input": "translate to SQL: What are the names of players who won in both 2013 and 2016? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"}
{"input": "translate to SQL: List the number of all matches who played in years of 2013 or 2016. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"input": "translate to SQL: How many matches were played in 2013 or 2016? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"}
{"input": "translate to SQL: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"input": "translate to SQL: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"}
{"input": "translate to SQL: Find the first name and country code of the oldest player. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"input": "translate to SQL: What is the first name and country code of the oldest player? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}
{"input": "translate to SQL: List the first and last name of all players in the order of birth date. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"input": "translate to SQL: What are the full names of all players, sorted by birth date? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"}
{"input": "translate to SQL: List the first and last name of all players who are left / L hand in the order of birth date. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"input": "translate to SQL: What are the full names of all left handed players, in order of birth date? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"}
{"input": "translate to SQL: Find the first name and country code of the player who did the most number of tours. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"input": "translate to SQL: What is the first name and country code of the player with the most tours? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}
{"input": "translate to SQL: Find the year that has the most number of matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which year had the most matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the name and rank points of the winner who won the most times. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the winner who has won the most matches, and how many rank points does this player have? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the winner with the most rank points who participated in the Australian Open tournament? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}
{"input": "translate to SQL: find the names of loser and winner who played in the match with greatest number of minutes. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"input": "translate to SQL: What are the names of the winner and loser who played in the longest match? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}
{"input": "translate to SQL: Find the average ranking for each player and their first name. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"input": "translate to SQL: What are the first names of all players, and their average rankings? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"input": "translate to SQL: Find the total ranking points for each player and their first name. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"input": "translate to SQL: What are the first names of all players, and their total ranking points? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"}
{"input": "translate to SQL: find the number of players for each country. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"input": "translate to SQL: How many players are from each country? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"}
{"input": "translate to SQL: find the code of the country where has the greatest number of players. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the code of the country with the most players? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the codes of countries that have more than 50 players. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"input": "translate to SQL: What are the codes of countries with more than 50 players? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"}
{"input": "translate to SQL: Find the total number of tours for each ranking date. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"input": "translate to SQL: How many total tours were there for each ranking date? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"}
{"input": "translate to SQL: Find the number of matches happened in each year. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"input": "translate to SQL: How many matches were played in each year? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"}
{"input": "translate to SQL: Find the name and rank of the 3 youngest winners across all matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"}
{"input": "translate to SQL: What are the names and ranks of the three youngest winners across all matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"}
{"input": "translate to SQL: How many different winners both participated in the WTA Championships and were left handed? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"input": "translate to SQL: Find the number of left handed winners who participated in the WTA Championships. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}
{"input": "translate to SQL: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"input": "translate to SQL: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}
{"input": "translate to SQL: Find the number of players for each hand type. | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"input": "translate to SQL: How many players are there for each hand type? | DB: wta_1 | Tables: players, matches, rankings | Columns: players.player_id, players.first_name, players.last_name, players.hand, players.birth_date, players.country_code, matches.best_of, matches.draw_size, matches.loser_age, matches.loser_entry, matches.loser_hand, matches.loser_ht, matches.loser_id, matches.loser_ioc, matches.loser_name, matches.loser_rank, matches.loser_rank_points, matches.loser_seed, matches.match_num, matches.minutes, matches.round, matches.score, matches.surface, matches.tourney_date, matches.tourney_id, matches.tourney_level, matches.tourney_name, matches.winner_age, matches.winner_entry, matches.winner_hand, matches.winner_ht, matches.winner_id, matches.winner_ioc, matches.winner_name, matches.winner_rank, matches.winner_rank_points, matches.winner_seed, matches.year, rankings.ranking_date, rankings.ranking, rankings.player_id, rankings.ranking_points, rankings.tours", "target": "SELECT count(*) ,  hand FROM players GROUP BY hand"}
{"input": "translate to SQL: How many ships ended up being 'Captured'? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}
{"input": "translate to SQL: List the name and tonnage ordered by in descending alphaetical order for the names. | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"}
{"input": "translate to SQL: List the name, date and result of each battle. | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT name ,  date FROM battle"}
{"input": "translate to SQL: What is maximum and minimum death toll caused each time? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT max(killed) ,  min(killed) FROM death"}
{"input": "translate to SQL: What is the average number of injuries caused each time? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT avg(injured) FROM death"}
{"input": "translate to SQL: What are the death and injury situations caused by the ship with tonnage 't'? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}
{"input": "translate to SQL: What are the name and results of the battles when the bulgarian commander is not 'Boril' | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}
{"input": "translate to SQL: What are the different ids and names of the battles that lost any 'Brig' type shipes? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}
{"input": "translate to SQL: What are the ids and names of the battles that led to more than 10 people killed in total. | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"}
{"input": "translate to SQL: What is the ship id and name that caused most total injuries? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}
{"input": "translate to SQL: How many different results are there for the battles? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT count(DISTINCT RESULT) FROM battle"}
{"input": "translate to SQL: How many battles did not lose any ship with tonnage '225'? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"}
{"input": "translate to SQL: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"}
{"input": "translate to SQL: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"}
{"input": "translate to SQL: What are the notes of the death events which has substring 'East'? | DB: battle_death | Tables: battle, ship, death | Columns: battle.id, battle.name, battle.date, battle.bulgarian_commander, battle.latin_commander, battle.result, ship.lost_in_battle, ship.id, ship.name, ship.tonnage, ship.ship_type, ship.location, ship.disposition_of_ship, death.caused_by_ship_id, death.id, death.note, death.killed, death.injured", "target": "SELECT note FROM death WHERE note LIKE '%East%'"}
{"input": "translate to SQL: what are all the addresses including line 1 and line 2? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT line_1 ,  line_2 FROM addresses"}
{"input": "translate to SQL: What is the first and second line for all addresses? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT line_1 ,  line_2 FROM addresses"}
{"input": "translate to SQL: How many courses in total are listed? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Courses"}
{"input": "translate to SQL: How many courses are there? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Courses"}
{"input": "translate to SQL: How is the math course described? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}
{"input": "translate to SQL: What are the descriptions for all the math courses? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}
{"input": "translate to SQL: What is the zip code of the address in the city Port Chelsea? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}
{"input": "translate to SQL: What is the zip code for Port Chelsea? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}
{"input": "translate to SQL: Which department offers the most number of degrees? List department name and id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name and id of the department with the most number of degrees ? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"}
{"input": "translate to SQL: How many departments offer any degree? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}
{"input": "translate to SQL: How many different departments offer degrees? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}
{"input": "translate to SQL: How many different degree names are offered? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}
{"input": "translate to SQL: How many different degrees are offered? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}
{"input": "translate to SQL: How many degrees does the engineering department offer? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}
{"input": "translate to SQL: How many degrees does the engineering department have? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}
{"input": "translate to SQL: What are the names and descriptions of all the sections? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_name ,  section_description FROM Sections"}
{"input": "translate to SQL: What are the names and descriptions for all the sections? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_name ,  section_description FROM Sections"}
{"input": "translate to SQL: What are the names and id of courses having at most 2 sections? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}
{"input": "translate to SQL: What are the names and ids of every course with less than 2 sections? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"}
{"input": "translate to SQL: List the section_name in reversed lexicographical order. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"input": "translate to SQL: What are the names of the sections in reverse alphabetical order? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_name FROM Sections ORDER BY section_name DESC"}
{"input": "translate to SQL: What is the semester which most student registered in? Show both the name and the id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: For each semester, what is the name and id of the one with the most students registered? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the description of the department whose name has the substring the computer? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"input": "translate to SQL: What is the department description for the one whose name has the word computer? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}
{"input": "translate to SQL: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}
{"input": "translate to SQL: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"}
{"input": "translate to SQL: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}
{"input": "translate to SQL: What are the first, middle, and last names for everybody enrolled in a Bachelors program? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}
{"input": "translate to SQL: Find the kind of program which most number of students are enrolled in? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the degree summary name that has the most number of students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the program which most number of students are enrolled in. List both the id and the summary. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the program id and the summary of the degree that has the most students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which semesters do not have any student enrolled? List the semester name. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}
{"input": "translate to SQL: What is the name of the semester with no students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"}
{"input": "translate to SQL: What are all the course names of the courses which ever have students enrolled in? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}
{"input": "translate to SQL: What are the names of all courses that have some students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}
{"input": "translate to SQL: What's the name of the course with most number of enrollments? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the course with the most students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}
{"input": "translate to SQL: What are the last name of the students who live in North Carolina but have not registered in any degree programs? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"}
{"input": "translate to SQL: Show the date and id of the transcript with at least 2 course results. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What is the date and id of the transcript with at least 2 courses listed? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What is the phone number of the man with the first name Timmothy and the last name Ward? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}
{"input": "translate to SQL: What is the mobile phone number of the student named Timmothy Ward ? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}
{"input": "translate to SQL: Who is the first student to register? List the first name, middle name and last name. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}
{"input": "translate to SQL: What is the first, middle, and last name of the first student to register? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}
{"input": "translate to SQL: Who is the earliest graduate of the school? List the first name, middle name and last name. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}
{"input": "translate to SQL: What is the first, middle, and last name of the earliest school graduate? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}
{"input": "translate to SQL: Whose permanent address is different from his or her current address? List his or her first name. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}
{"input": "translate to SQL: What is the first name of the student whose permanent address is different from his or her current one? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"}
{"input": "translate to SQL: Which address holds the most number of students currently? List the address id and all lines. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the id, line 1, and line 2 of the address with the most students? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: On average, when were the transcripts printed? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT avg(transcript_date) FROM Transcripts"}
{"input": "translate to SQL: What is the average transcript date? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT avg(transcript_date) FROM Transcripts"}
{"input": "translate to SQL: When is the first transcript released? List the date and details. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"input": "translate to SQL: What is the earliest date of a transcript release, and what details can you tell me? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}
{"input": "translate to SQL: How many transcripts are released? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Transcripts"}
{"input": "translate to SQL: How many transcripts are listed? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) FROM Transcripts"}
{"input": "translate to SQL: What is the last transcript release date? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"input": "translate to SQL: When was the last transcript released? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}
{"input": "translate to SQL: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show the date of the transcript which shows the least number of results, also list the id. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"}
{"input": "translate to SQL: What is the date and id of the transcript with the least number of results? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"}
{"input": "translate to SQL: Find the semester when both Master students and Bachelor students got enrolled in. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}
{"input": "translate to SQL: What is the id of the semester that had both Masters and Bachelors students enrolled? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"}
{"input": "translate to SQL: How many different addresses do the students currently live? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT current_address_id) FROM Students"}
{"input": "translate to SQL: What are the different addresses that have students living there? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT count(DISTINCT current_address_id) FROM Students"}
{"input": "translate to SQL: List all the student details in reversed lexicographical order. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}
{"input": "translate to SQL: What other details can you tell me about students in reverse alphabetical order? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"}
{"input": "translate to SQL: Describe the section h. | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}
{"input": "translate to SQL: What is the description for the section named h? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}
{"input": "translate to SQL: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}
{"input": "translate to SQL: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? | DB: student_transcripts_tracking | Tables: addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents | Columns: Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details, Courses.course_id, Courses.course_name, Courses.course_description, Courses.other_details, Departments.department_id, Departments.department_name, Departments.department_description, Departments.other_details, Degree_Programs.degree_program_id, Degree_Programs.department_id, Degree_Programs.degree_summary_name, Degree_Programs.degree_summary_description, Degree_Programs.other_details, Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description, Sections.other_details, Semesters.semester_id, Semesters.semester_name, Semesters.semester_description, Semesters.other_details, Students.student_id, Students.current_address_id, Students.permanent_address_id, Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Students.date_first_registered, Students.date_left, Students.other_student_details, Student_Enrolment.student_enrolment_id, Student_Enrolment.degree_program_id, Student_Enrolment.semester_id, Student_Enrolment.student_id, Student_Enrolment.other_details, Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id, Transcripts.transcript_id, Transcripts.transcript_date, Transcripts.other_details, Transcript_Contents.student_course_id, Transcript_Contents.transcript_id", "target": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"}
{"input": "translate to SQL: List the title of all cartoons in alphabetical order. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon ORDER BY title"}
{"input": "translate to SQL: What are the titles of the cartoons sorted alphabetically? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon ORDER BY title"}
{"input": "translate to SQL: List all cartoon directed by \"Ben Jones\". | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}
{"input": "translate to SQL: What are the names of all cartoons directed by Ben Jones? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"}
{"input": "translate to SQL: How many cartoons were written by \"Joseph Kuhr\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}
{"input": "translate to SQL: What is the number of cartoones written by Joseph Kuhr? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"}
{"input": "translate to SQL: list all cartoon titles and their directors ordered by their air date | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}
{"input": "translate to SQL: What is the name and directors of all the cartoons that are ordered by air date? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"}
{"input": "translate to SQL: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}
{"input": "translate to SQL: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"}
{"input": "translate to SQL: Which country has the most of TV Channels? List the country and number of TV Channels it has. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: What is the country with the most number of TV Channels and how many does it have? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}
{"input": "translate to SQL: List the number of different series names and contents in the TV Channel table. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}
{"input": "translate to SQL: How many different series and contents are listed in the TV Channel table? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}
{"input": "translate to SQL: What is the content of TV Channel with serial name \"Sky Radio\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"input": "translate to SQL: What is the content of the series Sky Radio? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"input": "translate to SQL: What is the Package Option of TV Channel with serial name \"Sky Radio\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"input": "translate to SQL: What are the Package Options of the TV Channels whose series names are Sky Radio? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"}
{"input": "translate to SQL: How many TV Channel using language English? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}
{"input": "translate to SQL: How many TV Channels use the English language? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"}
{"input": "translate to SQL: List the language used least number of TV Channel. List language and number of TV Channel. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}
{"input": "translate to SQL: What are the languages used by the least number of TV Channels and how many channels use it? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}
{"input": "translate to SQL: List each language and the number of TV Channels using it. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}
{"input": "translate to SQL: For each language, list the number of TV Channels that use it. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"}
{"input": "translate to SQL: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}
{"input": "translate to SQL: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"}
{"input": "translate to SQL: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}
{"input": "translate to SQL: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}
{"input": "translate to SQL: List the Episode of all TV series sorted by rating. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Episode FROM TV_series ORDER BY rating"}
{"input": "translate to SQL: What are all of the episodes ordered by ratings? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Episode FROM TV_series ORDER BY rating"}
{"input": "translate to SQL: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}
{"input": "translate to SQL: What are 3 most highly rated episodes in the TV series table and what were those ratings? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}
{"input": "translate to SQL: What is minimum and maximum share of TV series? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}
{"input": "translate to SQL: What is the maximum and minimum share for the TV series? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}
{"input": "translate to SQL: What is the air date of TV series with Episode \"A Love of a Lifetime\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: When did the episode \"A Love of a Lifetime\" air? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: What is the weekly rank for the episode \"A Love of a Lifetime\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: What is the name of the series that has the episode \"A Love of a Lifetime\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"}
{"input": "translate to SQL: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}
{"input": "translate to SQL: What is the episode for the TV series named \"Sky Radio\"? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"}
{"input": "translate to SQL: Find the number of cartoons directed by each of the listed directors. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}
{"input": "translate to SQL: How many cartoons did each director create? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"}
{"input": "translate to SQL: Find the production code and channel of the most recently aired cartoon . | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}
{"input": "translate to SQL: What is the produdction code and channel of the most recent cartoon ? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}
{"input": "translate to SQL: Find the package choice and series name of the TV channel that has high definition TV. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}
{"input": "translate to SQL: What are the package options and the name of the series for the TV Channel that supports high definition TV? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}
{"input": "translate to SQL: which countries' tv channels are playing some cartoon written by Todd Casey? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"input": "translate to SQL: What are the countries that have cartoons on TV that were written by Todd Casey? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"input": "translate to SQL: which countries' tv channels are not playing any cartoon written by Todd Casey? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"input": "translate to SQL: What are the countries that are not playing cartoons written by Todd Casey? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}
{"input": "translate to SQL: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}
{"input": "translate to SQL: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"}
{"input": "translate to SQL: find the pixel aspect ratio and nation of the tv channels that do not use English. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}
{"input": "translate to SQL: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}
{"input": "translate to SQL: find id of the tv channels that from the countries where have more than two tv channels. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"}
{"input": "translate to SQL: What are the ids of all tv channels that have more than 2 TV channels? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"}
{"input": "translate to SQL: find the id of tv channels that do not play any cartoon directed by Ben Jones. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}
{"input": "translate to SQL: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"}
{"input": "translate to SQL: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}
{"input": "translate to SQL: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? | DB: tvshow | Tables: tv channel, tv series, cartoon | Columns: TV_Channel.id, TV_Channel.series_name, TV_Channel.Country, TV_Channel.Language, TV_Channel.Content, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV, TV_Channel.Package_Option, TV_series.id, TV_series.Episode, TV_series.Air_Date, TV_series.Rating, TV_series.Share, TV_series.18_49_Rating_Share, TV_series.Viewers_m, TV_series.Weekly_Rank, TV_series.Channel, Cartoon.id, Cartoon.Title, Cartoon.Directed_by, Cartoon.Written_by, Cartoon.Original_air_date, Cartoon.Production_code, Cartoon.Channel", "target": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"}
{"input": "translate to SQL: How many poker players are there? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT count(*) FROM poker_player"}
{"input": "translate to SQL: Count the number of poker players. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT count(*) FROM poker_player"}
{"input": "translate to SQL: List the earnings of poker players in descending order. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"input": "translate to SQL: What are the earnings of poker players, ordered descending by value? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"}
{"input": "translate to SQL: List the final tables made and the best finishes of poker players. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}
{"input": "translate to SQL: What are the final tables made and best finishes for all poker players? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}
{"input": "translate to SQL: What is the average earnings of poker players? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT avg(Earnings) FROM poker_player"}
{"input": "translate to SQL: Return the average earnings across all poker players. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT avg(Earnings) FROM poker_player"}
{"input": "translate to SQL: What is the money rank of the poker player with the highest earnings? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"input": "translate to SQL: Return the money rank of the player with the greatest earnings. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}
{"input": "translate to SQL: What is the maximum number of final tables made among poker players with earnings less than 200000? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}
{"input": "translate to SQL: Return the maximum final tables made across all poker players who have earnings below 200000. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}
{"input": "translate to SQL: What are the names of poker players? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}
{"input": "translate to SQL: Return the names of all the poker players. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}
{"input": "translate to SQL: What are the names of poker players whose earnings is higher than 300000? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}
{"input": "translate to SQL: Give the names of poker players who have earnings above 300000. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}
{"input": "translate to SQL: List the names of poker players ordered by the final tables made in ascending order. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}
{"input": "translate to SQL: What are the names of poker players, ordered ascending by the number of final tables they have made? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"}
{"input": "translate to SQL: What is the birth date of the poker player with the lowest earnings? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}
{"input": "translate to SQL: Return the birth date of the poker player with the lowest earnings. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}
{"input": "translate to SQL: What is the money rank of the tallest poker player? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}
{"input": "translate to SQL: Return the money rank of the poker player with the greatest height. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}
{"input": "translate to SQL: What is the average earnings of poker players with height higher than 200? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"input": "translate to SQL: Give average earnings of poker players who are taller than 200. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}
{"input": "translate to SQL: What are the names of poker players in descending order of earnings? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}
{"input": "translate to SQL: Return the names of poker players sorted by their earnings descending. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"}
{"input": "translate to SQL: What are different nationalities of people and the corresponding number of people from each nation? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}
{"input": "translate to SQL: How many people are there of each nationality? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"}
{"input": "translate to SQL: What is the most common nationality of people? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Give the nationality that is most common across all people. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: What are the nationalities that are shared by at least two people? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: Return the nationalities for which there are two or more people. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"}
{"input": "translate to SQL: List the names and birth dates of people in ascending alphabetical order of name. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}
{"input": "translate to SQL: What are the names and birth dates of people, ordered by their names in alphabetical order? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"}
{"input": "translate to SQL: Show names of people whose nationality is not \"Russia\". | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name FROM people WHERE Nationality != \"Russia\""}
{"input": "translate to SQL: What are the names of people who are not from Russia? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name FROM people WHERE Nationality != \"Russia\""}
{"input": "translate to SQL: List the names of people that are not poker players. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"input": "translate to SQL: What are the names of people who do not play poker? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"}
{"input": "translate to SQL: How many distinct nationalities are there? | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT count(DISTINCT Nationality) FROM people"}
{"input": "translate to SQL: Count the number of different nationalities. | DB: poker_player | Tables: poker player, people | Columns: poker_player.Poker_Player_ID, poker_player.People_ID, poker_player.Final_Table_Made, poker_player.Best_Finish, poker_player.Money_Rank, poker_player.Earnings, people.People_ID, people.Nationality, people.Name, people.Birth_Date, people.Height", "target": "SELECT count(DISTINCT Nationality) FROM people"}
{"input": "translate to SQL: How many states are there? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT count(*) FROM area_code_state"}
{"input": "translate to SQL: List the contestant numbers and names, ordered by contestant name descending. | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"}
{"input": "translate to SQL: List the vote ids, phone numbers and states of all votes. | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT vote_id ,  phone_number ,  state FROM votes"}
{"input": "translate to SQL: What are the maximum and minimum values of area codes? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}
{"input": "translate to SQL: What is last date created of votes from the state 'CA'? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT max(created) FROM votes WHERE state  =  'CA'"}
{"input": "translate to SQL: What are the names of the contestants whose names are not 'Jessie Alloway' | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}
{"input": "translate to SQL: What are the distinct states and create time of all votes? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT DISTINCT state ,  created FROM votes"}
{"input": "translate to SQL: What are the contestant numbers and names of the contestants who had at least two votes? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"}
{"input": "translate to SQL: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"}
{"input": "translate to SQL: What are the number of votes from state 'NY' or 'CA'? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"}
{"input": "translate to SQL: How many contestants did not get voted? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"}
{"input": "translate to SQL: What is the area code in which the most voters voted? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}
{"input": "translate to SQL: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"}
{"input": "translate to SQL: Return the names of the contestants whose names contain the substring 'Al' . | DB: voter_1 | Tables: area code state, contestants, votes | Columns: AREA_CODE_STATE.area_code, AREA_CODE_STATE.state, CONTESTANTS.contestant_number, CONTESTANTS.contestant_name, VOTES.vote_id, VOTES.phone_number, VOTES.state, VOTES.contestant_number, VOTES.created", "target": "select contestant_name from contestants where contestant_name like \"%al%\""}
{"input": "translate to SQL: What are the names of all the countries that became independent after 1950? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"input": "translate to SQL: Give the names of the nations that were founded after 1950. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE IndepYear  >  1950"}
{"input": "translate to SQL: How many countries have a republic as their form of government? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}
{"input": "translate to SQL: How many countries have governments that are republics? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""}
{"input": "translate to SQL: What is the total surface area of the countries in the Caribbean region? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}
{"input": "translate to SQL: How much surface area do the countires in the Carribean cover together? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""}
{"input": "translate to SQL: Which continent is Anguilla in? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}
{"input": "translate to SQL: What is the continent name which Anguilla belongs to? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""}
{"input": "translate to SQL: Which region is the city Kabul located in? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}
{"input": "translate to SQL: What region is Kabul in? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""}
{"input": "translate to SQL: Which language is the most popular in Aruba? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}
{"input": "translate to SQL: What language is predominantly spoken in Aruba? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"}
{"input": "translate to SQL: What are the population and life expectancies in Brazil? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}
{"input": "translate to SQL: Give me Brazil\u2019s population and life expectancies. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""}
{"input": "translate to SQL: What are the region and population of Angola? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}
{"input": "translate to SQL: What region does Angola belong to and what is its population? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""}
{"input": "translate to SQL: What is the average expected life expectancy for countries in the region of Central Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}
{"input": "translate to SQL: How long is the people\u2019s average life expectancy in Central Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""}
{"input": "translate to SQL: What is the name of country that has the shortest life expectancy in Asia? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}
{"input": "translate to SQL: Give the name of the country in Asia with the lowest life expectancy. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}
{"input": "translate to SQL: What is the total population and maximum GNP in Asia? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}
{"input": "translate to SQL: How many people live in Asia, and what is the largest GNP among them? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}
{"input": "translate to SQL: What is the average life expectancy in African countries that are republics? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}
{"input": "translate to SQL: Give the average life expectancy for countries in Africa which are republics? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""}
{"input": "translate to SQL: What is the total surface area of the continents Asia and Europe? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""}
{"input": "translate to SQL: Give the total surface area covered by countries in Asia or Europe. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""}
{"input": "translate to SQL: How many people live in Gelderland district? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}
{"input": "translate to SQL: What is the total population of Gelderland district? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""}
{"input": "translate to SQL: What is the average GNP and total population in all nations whose government is US territory? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}
{"input": "translate to SQL: Give the mean GNP and total population of nations which are considered US territory. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""}
{"input": "translate to SQL: How many unique languages are spoken in the world? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"input": "translate to SQL: What is the number of distinct languages used around the world? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}
{"input": "translate to SQL: How many type of governments are in Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}
{"input": "translate to SQL: How many different forms of governments are there in Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}
{"input": "translate to SQL: What is the total number of languages used in Aruba? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}
{"input": "translate to SQL: How many languages are spoken in Aruba? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""}
{"input": "translate to SQL: How many official languages does Afghanistan have? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}
{"input": "translate to SQL: How many official languages are spoken in Afghanistan? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""}
{"input": "translate to SQL: What is name of the country that speaks the largest number of languages? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Give the name of the nation that uses the greatest amount of languages. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which continent has the most diverse languages? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which continent speaks the most languages? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: How many countries speak both English and Dutch? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"}
{"input": "translate to SQL: What is the number of nations that use English and Dutch? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"}
{"input": "translate to SQL: What are the names of nations speak both English and French? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""}
{"input": "translate to SQL: Give the names of nations that speak both English and French. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""}
{"input": "translate to SQL: What are the names of nations where both English and French are official languages? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: Give the names of countries with English and French as official languages. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: What is the number of distinct continents where Chinese is spoken? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}
{"input": "translate to SQL: How many continents speak Chinese? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""}
{"input": "translate to SQL: What are the regions that use English or Dutch? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""}
{"input": "translate to SQL: Which regions speak Dutch or English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""}
{"input": "translate to SQL: What are the countries where either English or Dutch is the official language ? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""}
{"input": "translate to SQL: Which countries have either English or Dutch as an official language? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""}
{"input": "translate to SQL: Which language is the most popular on the Asian continent? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the language that is used by the largest number of Asian nations? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"}
{"input": "translate to SQL: Which languages are spoken by only one country in republic governments? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}
{"input": "translate to SQL: What languages are only used by a single country with a republic government? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"}
{"input": "translate to SQL: Find the city with the largest population that uses English. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"}
{"input": "translate to SQL: What is the most populace city that speaks English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"}
{"input": "translate to SQL: Find the name, population and expected life length of asian country with the largest area? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}
{"input": "translate to SQL: What are the name, population, and life expectancy of the largest Asian country by land? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}
{"input": "translate to SQL: What is average life expectancy in the countries where English is not the official language? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"}
{"input": "translate to SQL: Give the mean life expectancy of countries in which English is not the official language. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"}
{"input": "translate to SQL: What is the total number of people living in the nations that do not use English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"}
{"input": "translate to SQL: How many people live in countries that do not speak English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"}
{"input": "translate to SQL: What is the official language spoken in the country whose head of state is Beatrix? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: What is the official language used in the country the name of whose head of state is Beatrix. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: What is the total number of unique official languages spoken in the countries that are founded before 1930? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: For the countries founded before 1930, what is the total number of distinct official languages? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}
{"input": "translate to SQL: What are the countries that have greater surface area than any country in Europe? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"}
{"input": "translate to SQL: Which countries have greater area than that of any country in Europe? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"}
{"input": "translate to SQL: What are the African countries that have a  population less than any country in Asia? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"}
{"input": "translate to SQL: Which African countries have a smaller population than that of any country in Asia? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"}
{"input": "translate to SQL: Which Asian countries have a population that is larger than any country in Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"}
{"input": "translate to SQL: What are the Asian countries which have a population larger than that of any country in Africa? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"}
{"input": "translate to SQL: What are the country codes for countries that do not speak English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}
{"input": "translate to SQL: Return the country codes for countries that do not speak English. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}
{"input": "translate to SQL: What are the country codes of countries where people use languages other than English? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}
{"input": "translate to SQL: Give the country codes for countries in which people speak langauges that are not English. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""}
{"input": "translate to SQL: What are the codes of the countries that do not speak English and whose government forms are not Republic? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}
{"input": "translate to SQL: Return the codes of countries that do not speak English and do not have Republics for governments. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""}
{"input": "translate to SQL: Which cities are in European countries where English is not the official language? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}
{"input": "translate to SQL: What are the names of cities in Europe for which English is not the official language? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"}
{"input": "translate to SQL: Which unique cities are in Asian countries where Chinese is the official language ? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""}
{"input": "translate to SQL: Return the different names of cities that are in Asia and for which Chinese is the official language. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""}
{"input": "translate to SQL: What are the name, independence year, and surface area of the country with the smallest population? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"input": "translate to SQL: Give the name, year of independence, and surface area of the country that has the lowest population. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}
{"input": "translate to SQL: What are the population, name and leader of the country with the largest area? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"input": "translate to SQL: Give the name, population, and head of state for the country that has the largest area. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}
{"input": "translate to SQL: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"input": "translate to SQL: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"}
{"input": "translate to SQL: Find the number of cities in each district whose population is greater than the average population of cities? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}
{"input": "translate to SQL: How many cities in each district have a population that is above the average population across all cities? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"}
{"input": "translate to SQL: Find the government form name and total population for each government form whose average life expectancy is longer than 72. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"input": "translate to SQL: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"}
{"input": "translate to SQL: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"input": "translate to SQL: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"}
{"input": "translate to SQL: What are the names and areas of countries with the top 5 largest area? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"input": "translate to SQL: Return the names and surface areas of the 5 largest countries. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"}
{"input": "translate to SQL: What are names of countries with the top 3 largest population? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"input": "translate to SQL: Return the names of the 3 most populated countries. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"}
{"input": "translate to SQL: What are the names of the nations with the 3 lowest populations? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"input": "translate to SQL: Return the names of the 3 countries with the fewest people. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"}
{"input": "translate to SQL: how many countries are in Asia? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}
{"input": "translate to SQL: Count the number of countries in Asia. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}
{"input": "translate to SQL: What are the names of the countries that are in the continent of Europe and have a population of 80000? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}
{"input": "translate to SQL: Give the names of countries that are in Europe and have a population equal to 80000. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}
{"input": "translate to SQL: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}
{"input": "translate to SQL: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"}
{"input": "translate to SQL: What are the cities whose population is between 160000 and 900000? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}
{"input": "translate to SQL: Return the names of cities that have a population between 160000 and 900000 . | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "select name from city where population between 160000 and 900000"}
{"input": "translate to SQL: Which language is spoken by the largest number of countries? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Give the language that is spoken in the most countries. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the language spoken by the largest percentage of people in each country? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"}
{"input": "translate to SQL: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"}
{"input": "translate to SQL: What is the total number of countries where Spanish is spoken by the largest percentage of people? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"input": "translate to SQL: Count the number of countries for which Spanish is the predominantly spoken language. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"input": "translate to SQL: What are the codes of countries where Spanish is spoken by the largest percentage of people? | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"input": "translate to SQL: Return the codes of countries for which Spanish is the predominantly spoken language. | DB: world_1 | Tables: city, sqlite sequence, country, countrylanguage | Columns: city.ID, city.Name, city.CountryCode, city.District, city.Population, sqlite_sequence.name, sqlite_sequence.seq, country.Code, country.Name, country.Continent, country.Region, country.SurfaceArea, country.IndepYear, country.Population, country.LifeExpectancy, country.GNP, country.GNPOld, country.LocalName, country.GovernmentForm, country.HeadOfState, country.Capital, country.Code2, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.Percentage", "target": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"}
{"input": "translate to SQL: How many conductors are there? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT count(*) FROM conductor"}
{"input": "translate to SQL: Count the number of conductors. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT count(*) FROM conductor"}
{"input": "translate to SQL: List the names of conductors in ascending order of age. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"input": "translate to SQL: What are the names of conductors, ordered by age? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Age ASC"}
{"input": "translate to SQL: What are the names of conductors whose nationalities are not \"USA\"? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}
{"input": "translate to SQL: Return the names of conductors that do not have the nationality \"USA\". | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}
{"input": "translate to SQL: What are the record companies of orchestras in descending order of years in which they were founded? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}
{"input": "translate to SQL: Return the record companies of orchestras, sorted descending by the years in which they were founded. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"}
{"input": "translate to SQL: What is the average attendance of shows? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT avg(Attendance) FROM SHOW"}
{"input": "translate to SQL: Return the average attendance across all shows. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT avg(Attendance) FROM SHOW"}
{"input": "translate to SQL: What are the maximum and minimum share of performances whose type is not \"Live final\". | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}
{"input": "translate to SQL: Return the maximum and minimum shares for performances that do not have the type \"Live final\". | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}
{"input": "translate to SQL: How many different nationalities do conductors have? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"input": "translate to SQL: Count the number of different nationalities of conductors. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT count(DISTINCT Nationality) FROM conductor"}
{"input": "translate to SQL: List names of conductors in descending order of years of work. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"input": "translate to SQL: What are the names of conductors, sorted descending by the number of years they have worked? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"}
{"input": "translate to SQL: List the name of the conductor with the most years of work. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the conductor who has worked the greatest number of years? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}
{"input": "translate to SQL: Show the names of conductors and the orchestras they have conducted. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"input": "translate to SQL: What are the names of conductors as well as the corresonding orchestras that they have conducted? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}
{"input": "translate to SQL: Show the names of conductors that have conducted more than one orchestras. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: What are the names of conductors who have conducted at more than one orchestra? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: Show the name of the conductor that has conducted the most number of orchestras. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the conductor who has conducted the most orchestras? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: Please show the name of the conductor that has conducted orchestras founded after 2008. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}
{"input": "translate to SQL: What are the names of conductors who have conducted orchestras founded after the year 2008? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}
{"input": "translate to SQL: Please show the different record companies and the corresponding number of orchestras. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"input": "translate to SQL: How many orchestras does each record company manage? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"}
{"input": "translate to SQL: Please show the record formats of orchestras in ascending order of count. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}
{"input": "translate to SQL: What are the major record formats of orchestras, sorted by their frequency? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"}
{"input": "translate to SQL: List the record company shared by the most number of orchestras. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the record company used by the greatest number of orchestras? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: List the names of orchestras that have no performance. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"input": "translate to SQL: What are the orchestras that do not have any performances? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"}
{"input": "translate to SQL: Show the record companies shared by orchestras founded before 2003 and after 2003. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}
{"input": "translate to SQL: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"}
{"input": "translate to SQL: Find the number of orchestras whose record format is \"CD\" or \"DVD\". | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""}
{"input": "translate to SQL: Count the number of orchestras that have CD or DVD as their record format. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""}
{"input": "translate to SQL: Show the years in which orchestras that have given more than one performance are founded. | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: What are years of founding for orchestras that have had more than a single performance? | DB: orchestra | Tables: conductor, orchestra, performance, show | Columns: conductor.Conductor_ID, conductor.Name, conductor.Age, conductor.Nationality, conductor.Year_of_Work, orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Conductor_ID, orchestra.Record_Company, orchestra.Year_of_Founded, orchestra.Major_Record_Format, performance.Performance_ID, performance.Orchestra_ID, performance.Type, performance.Date, performance.Official_ratings_(millions), performance.Weekly_rank, performance.Share, show.Show_ID, show.Performance_ID, show.If_first_show, show.Result, show.Attendance", "target": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: How many high schoolers are there? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Highschooler"}
{"input": "translate to SQL: Count the number of high schoolers. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Highschooler"}
{"input": "translate to SQL: Show the names and grades of each high schooler. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name ,  grade FROM Highschooler"}
{"input": "translate to SQL: What are the names and grades for each high schooler? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name ,  grade FROM Highschooler"}
{"input": "translate to SQL: Show all the grades of the high schoolers. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler"}
{"input": "translate to SQL: What is the grade of each high schooler? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler"}
{"input": "translate to SQL: What grade is Kyle in? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""}
{"input": "translate to SQL: Return the grade for the high schooler named Kyle. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""}
{"input": "translate to SQL: Show the names of all high schoolers in grade 10. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name FROM Highschooler WHERE grade  =  10"}
{"input": "translate to SQL: What are the names of all high schoolers in grade 10? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name FROM Highschooler WHERE grade  =  10"}
{"input": "translate to SQL: Show the ID of the high schooler named Kyle. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""}
{"input": "translate to SQL: What is Kyle's id? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""}
{"input": "translate to SQL: How many high schoolers are there in grade 9 or 10? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}
{"input": "translate to SQL: Count the number of high schoolers in grades 9 or 10. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"}
{"input": "translate to SQL: Show the number of high schoolers for each grade. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}
{"input": "translate to SQL: How many high schoolers are in each grade? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"}
{"input": "translate to SQL: Which grade has the most high schoolers? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the grade that has the greatest number of high schoolers. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show me all grades that have at least 4 students. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}
{"input": "translate to SQL: Which grades have 4 or more high schoolers? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"}
{"input": "translate to SQL: Show the student IDs and numbers of friends corresponding to each. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}
{"input": "translate to SQL: How many friends does each student have? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"}
{"input": "translate to SQL: Show the names of high school students and their corresponding number of friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}
{"input": "translate to SQL: What are the names of the high schoolers and how many friends does each have? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}
{"input": "translate to SQL: What is the name of the high schooler who has the greatest number of friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the name of the high school student with the most friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show the names of high schoolers who have at least 3 friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"}
{"input": "translate to SQL: What are the names of high schoolers who have 3 or more friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"}
{"input": "translate to SQL: Show the names of all of the high schooler Kyle's friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: Return the names of friends of the high school student Kyle. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: How many friends does the high school student Kyle have? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: Count the number of friends Kyle has. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: Show ids of all students who do not have any friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}
{"input": "translate to SQL: What are the ids of high school students who do not have friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"}
{"input": "translate to SQL: Show names of all high school students who do not have any friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}
{"input": "translate to SQL: What are the names of students who have no friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"}
{"input": "translate to SQL: Show the ids of high schoolers who have friends and are also liked by someone else. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}
{"input": "translate to SQL: What are the ids of students who both have friends and are liked? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"}
{"input": "translate to SQL: Show name of all students who have some friends and also are liked by someone else. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}
{"input": "translate to SQL: What are the names of high schoolers who both have friends and are liked? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"}
{"input": "translate to SQL: Count the number of likes for each student id. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}
{"input": "translate to SQL: How many likes correspond to each student id? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"}
{"input": "translate to SQL: Show the names of high schoolers who have likes, and numbers of likes for each. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}
{"input": "translate to SQL: What are the names of high schoolers who have likes, and how many likes does each have? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"}
{"input": "translate to SQL: What is the name of the high schooler who has the greatest number of likes? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Give the name of the student with the most likes. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Show the names of students who have at least 2 likes. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What are the names of students who have 2 or more likes? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: Show the names of students who have a grade higher than 5 and have at least 2 friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: How many likes does Kyle have? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: Return the number of likes that the high schooler named Kyle has. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""}
{"input": "translate to SQL: Find the average grade of all students who have some friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"input": "translate to SQL: What is the average grade of students who have friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"input": "translate to SQL: Find the minimum grade of students who have no friends. | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"input": "translate to SQL: What is the lowest grade of students who do not have any friends? | DB: network_1 | Tables: high schooler, friend, likes | Columns: Highschooler.ID, Highschooler.name, Highschooler.grade, Friend.student_id, Friend.friend_id, Likes.student_id, Likes.liked_id", "target": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"}
{"input": "translate to SQL: Which states have both owners and professionals living there? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"input": "translate to SQL: Find the states where both owners and professionals live. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"}
{"input": "translate to SQL: What is the average age of the dogs who have gone through any treatments? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"}
{"input": "translate to SQL: Find the average age of the dogs who went through treatments. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"}
{"input": "translate to SQL: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"input": "translate to SQL: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"}
{"input": "translate to SQL: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}
{"input": "translate to SQL: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"}
{"input": "translate to SQL: Which first names are used for professionals or owners but are not used as dog names? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"input": "translate to SQL: Find the first names that are used for professionals or owners but are not used as dog names. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"}
{"input": "translate to SQL: Which professional did not operate any treatment on dogs? List the professional's id, role and email. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"input": "translate to SQL: Give me the id, role and email of the professionals who did not perform any treatment on dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"}
{"input": "translate to SQL: Which owner owns the most dogs? List the owner id, first name and last name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Return the owner id, first name and last name of the owner who has the most dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which professionals have done at least two treatments? List the professional's id, role, and first name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What are the id, role, and first name of the professionals who have performed two or more treatments? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What is the name of the breed with the most dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which breed do the most dogs have? Give me the breed name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the description of the treatment type that costs the least money in total? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"input": "translate to SQL: Give me the description of the treatment type whose total cost is the lowest. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"}
{"input": "translate to SQL: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"input": "translate to SQL: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"}
{"input": "translate to SQL: Which professionals have done at least two types of treatments? List the professional id and cell phone. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: Find the id and cell phone of the professionals who operate two or more types of treatments. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"}
{"input": "translate to SQL: What are the first name and last name of the professionals who have done treatment with cost below average? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}
{"input": "translate to SQL: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"}
{"input": "translate to SQL: List the date of each treatment, together with the first name of the professional who operated it. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"input": "translate to SQL: What are the date and the operating professional's first name of each treatment? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}
{"input": "translate to SQL: List the cost of each treatment and the corresponding treatment type description. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"input": "translate to SQL: What are the cost and treatment type description of each treatment? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"}
{"input": "translate to SQL: List each owner's first name, last name, and the size of his for her dog. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"input": "translate to SQL: What are each owner's first name, last name, and the size of their dog? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"input": "translate to SQL: List pairs of the owner's first name and the dogs's name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"input": "translate to SQL: What are each owner's first name and their dogs's name? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}
{"input": "translate to SQL: List the names of the dogs of the rarest breed and the treatment dates of them. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"input": "translate to SQL: Which dogs are of the rarest breed? Show their names and treatment dates. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"}
{"input": "translate to SQL: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"input": "translate to SQL: Find the first names of owners living in Virginia and the names of dogs they own. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}
{"input": "translate to SQL: What are the arriving date and the departing date of the dogs who have gone through a treatment? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"input": "translate to SQL: Find the arriving date and the departing date of the dogs that received a treatment. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}
{"input": "translate to SQL: List the last name of the owner owning the youngest dog. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"input": "translate to SQL: Who owns the youngest dog? Give me his or her last name. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"}
{"input": "translate to SQL: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"input": "translate to SQL: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"}
{"input": "translate to SQL: What are the arriving date and the departing date of all the dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"input": "translate to SQL: List the arrival date and the departure date for all the dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT date_arrived ,  date_departed FROM Dogs"}
{"input": "translate to SQL: How many dogs went through any treatments? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"input": "translate to SQL: Count the number of dogs that went through a treatment. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(DISTINCT dog_id) FROM Treatments"}
{"input": "translate to SQL: How many professionals have performed any treatment to dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"input": "translate to SQL: Find the number of professionals who have ever treated dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(DISTINCT professional_id) FROM Treatments"}
{"input": "translate to SQL: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"input": "translate to SQL: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}
{"input": "translate to SQL: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"input": "translate to SQL: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}
{"input": "translate to SQL: How many dogs have an age below the average? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"}
{"input": "translate to SQL: Count the number of dogs of an age below the average. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"}
{"input": "translate to SQL: How much does the most recent treatment cost? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"input": "translate to SQL: Show me the cost of the most recently performed treatment. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}
{"input": "translate to SQL: How many dogs have not gone through any treatment? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"}
{"input": "translate to SQL: Tell me the number of dogs that have not received any treatment . | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"}
{"input": "translate to SQL: How many owners temporarily do not have any dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}
{"input": "translate to SQL: Find the number of owners who do not own any dogs at this moment. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"}
{"input": "translate to SQL: How many professionals did not operate any treatment on dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"input": "translate to SQL: Find the number of professionals who have not treated any dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"}
{"input": "translate to SQL: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}
{"input": "translate to SQL: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}
{"input": "translate to SQL: What is the average age of all the dogs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT avg(age) FROM Dogs"}
{"input": "translate to SQL: Compute the average age of all the dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT avg(age) FROM Dogs"}
{"input": "translate to SQL: What is the age of the oldest dog? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT max(age) FROM Dogs"}
{"input": "translate to SQL: Tell me the age of the oldest dog. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT max(age) FROM Dogs"}
{"input": "translate to SQL: How much does each charge type costs? List both charge type and amount. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT charge_type ,  charge_amount FROM Charges"}
{"input": "translate to SQL: List each charge type and its amount. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT charge_type ,  charge_amount FROM Charges"}
{"input": "translate to SQL: How much does the most expensive charge type costs? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT max(charge_amount) FROM Charges"}
{"input": "translate to SQL: What is the charge amount of the most expensive charge type? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT max(charge_amount) FROM Charges"}
{"input": "translate to SQL: List the email, cell phone and home phone of all the professionals. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"input": "translate to SQL: What are the email, cell phone and home phone of each professional? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}
{"input": "translate to SQL: What are all the possible breed type and size type combinations? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"input": "translate to SQL: Find the distinct breed type and size type combinations for dogs. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}
{"input": "translate to SQL: List the first name of all the professionals along with the description of the treatment they have done. | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"input": "translate to SQL: What are each professional's first name and description of the treatment they have performed? | DB: dog_kennels | Tables: breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments | Columns: Breeds.breed_code, Breeds.breed_name, Charges.charge_id, Charges.charge_type, Charges.charge_amount, Sizes.size_code, Sizes.size_description, Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, Owners.owner_id, Owners.first_name, Owners.last_name, Owners.street, Owners.city, Owners.state, Owners.zip_code, Owners.email_address, Owners.home_phone, Owners.cell_number, Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Dogs.breed_code, Dogs.size_code, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed, Professionals.professional_id, Professionals.role_code, Professionals.first_name, Professionals.street, Professionals.city, Professionals.state, Professionals.zip_code, Professionals.last_name, Professionals.email_address, Professionals.home_phone, Professionals.cell_number, Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment", "target": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"}
{"input": "translate to SQL: How many singers are there? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT count(*) FROM singer"}
{"input": "translate to SQL: What is the count of singers? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT count(*) FROM singer"}
{"input": "translate to SQL: List the name of singers in ascending order of net worth. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"input": "translate to SQL: What are the names of singers ordered by ascending net worth? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"}
{"input": "translate to SQL: What are the birth year and citizenship of singers? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"input": "translate to SQL: What are the birth years and citizenships of the singers? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Birth_Year ,  Citizenship FROM singer"}
{"input": "translate to SQL: List the name of singers whose citizenship is not \"France\". | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Citizenship != \"France\""}
{"input": "translate to SQL: What are the names of the singers who are not French citizens? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Citizenship != \"France\""}
{"input": "translate to SQL: Show the name of singers whose birth year is either 1948 or 1949? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}
{"input": "translate to SQL: What are the names of the singers whose birth years are either 1948 or 1949? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"}
{"input": "translate to SQL: What is the name of the singer with the largest net worth? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"input": "translate to SQL: What is the name of the singer who is worth the most? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}
{"input": "translate to SQL: Show different citizenship of singers and the number of singers of each citizenship. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"input": "translate to SQL: For each citizenship, how many singers are from that country? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"}
{"input": "translate to SQL: Please show the most common citizenship of singers. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"}
{"input": "translate to SQL: What is the most common singer citizenship ? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "select citizenship from singer group by citizenship order by count(*) desc limit 1"}
{"input": "translate to SQL: Show different citizenships and the maximum net worth of singers of each citizenship. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"input": "translate to SQL: For each citizenship, what is the maximum net worth? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"}
{"input": "translate to SQL: Show titles of songs and names of singers. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"input": "translate to SQL: What are the song titles and singer names? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}
{"input": "translate to SQL: Show distinct names of singers that have songs with sales more than 300000. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"input": "translate to SQL: what are the different names of the singers that have sales more than 300000? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}
{"input": "translate to SQL: Show the names of singers that have more than one song. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: What are the names of the singers that have more than one songs? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"}
{"input": "translate to SQL: Show the names of singers and the total sales of their songs. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"input": "translate to SQL: For each singer name, what is the total sales for their songs? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"}
{"input": "translate to SQL: List the name of singers that do not have any song. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"input": "translate to SQL: What is the sname of every sing that does not have any song? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"}
{"input": "translate to SQL: Show the citizenship shared by singers with birth year before 1945 and after 1955. | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"input": "translate to SQL: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? | DB: singer | Tables: singer, song | Columns: singer.Singer_ID, singer.Name, singer.Birth_Year, singer.Net_Worth_Millions, singer.Citizenship, song.Song_ID, song.Title, song.Singer_ID, song.Sales, song.Highest_Position", "target": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"}
{"input": "translate to SQL: How many available features are there in total? | DB: real_estate_properties | Tables: reference feature types, reference property types, other available features, properties, other property features | Columns: Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Other_Available_Features.feature_id, Other_Available_Features.feature_type_code, Other_Available_Features.feature_name, Other_Available_Features.feature_description, Properties.property_id, Properties.property_type_code, Properties.date_on_market, Properties.date_sold, Properties.property_name, Properties.property_address, Properties.room_count, Properties.vendor_requested_price, Properties.buyer_offered_price, Properties.agreed_selling_price, Properties.apt_feature_1, Properties.apt_feature_2, Properties.apt_feature_3, Properties.fld_feature_1, Properties.fld_feature_2, Properties.fld_feature_3, Properties.hse_feature_1, Properties.hse_feature_2, Properties.hse_feature_3, Properties.oth_feature_1, Properties.oth_feature_2, Properties.oth_feature_3, Properties.shp_feature_1, Properties.shp_feature_2, Properties.shp_feature_3, Properties.other_property_details, Other_Property_Features.property_id, Other_Property_Features.feature_id, Other_Property_Features.property_feature_description", "target": "SELECT count(*) FROM Other_Available_Features"}
{"input": "translate to SQL: What is the feature type name of feature AirCon? | DB: real_estate_properties | Tables: reference feature types, reference property types, other available features, properties, other property features | Columns: Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Other_Available_Features.feature_id, Other_Available_Features.feature_type_code, Other_Available_Features.feature_name, Other_Available_Features.feature_description, Properties.property_id, Properties.property_type_code, Properties.date_on_market, Properties.date_sold, Properties.property_name, Properties.property_address, Properties.room_count, Properties.vendor_requested_price, Properties.buyer_offered_price, Properties.agreed_selling_price, Properties.apt_feature_1, Properties.apt_feature_2, Properties.apt_feature_3, Properties.fld_feature_1, Properties.fld_feature_2, Properties.fld_feature_3, Properties.hse_feature_1, Properties.hse_feature_2, Properties.hse_feature_3, Properties.oth_feature_1, Properties.oth_feature_2, Properties.oth_feature_3, Properties.shp_feature_1, Properties.shp_feature_2, Properties.shp_feature_3, Properties.other_property_details, Other_Property_Features.property_id, Other_Property_Features.feature_id, Other_Property_Features.property_feature_description", "target": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}
{"input": "translate to SQL: Show the property type descriptions of properties belonging to that code. | DB: real_estate_properties | Tables: reference feature types, reference property types, other available features, properties, other property features | Columns: Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Other_Available_Features.feature_id, Other_Available_Features.feature_type_code, Other_Available_Features.feature_name, Other_Available_Features.feature_description, Properties.property_id, Properties.property_type_code, Properties.date_on_market, Properties.date_sold, Properties.property_name, Properties.property_address, Properties.room_count, Properties.vendor_requested_price, Properties.buyer_offered_price, Properties.agreed_selling_price, Properties.apt_feature_1, Properties.apt_feature_2, Properties.apt_feature_3, Properties.fld_feature_1, Properties.fld_feature_2, Properties.fld_feature_3, Properties.hse_feature_1, Properties.hse_feature_2, Properties.hse_feature_3, Properties.oth_feature_1, Properties.oth_feature_2, Properties.oth_feature_3, Properties.shp_feature_1, Properties.shp_feature_2, Properties.shp_feature_3, Properties.other_property_details, Other_Property_Features.property_id, Other_Property_Features.feature_id, Other_Property_Features.property_feature_description", "target": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"}
{"input": "translate to SQL: What are the names of properties that are either houses or apartments with more than 1 room? | DB: real_estate_properties | Tables: reference feature types, reference property types, other available features, properties, other property features | Columns: Ref_Feature_Types.feature_type_code, Ref_Feature_Types.feature_type_name, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Other_Available_Features.feature_id, Other_Available_Features.feature_type_code, Other_Available_Features.feature_name, Other_Available_Features.feature_description, Properties.property_id, Properties.property_type_code, Properties.date_on_market, Properties.date_sold, Properties.property_name, Properties.property_address, Properties.room_count, Properties.vendor_requested_price, Properties.buyer_offered_price, Properties.agreed_selling_price, Properties.apt_feature_1, Properties.apt_feature_2, Properties.apt_feature_3, Properties.fld_feature_1, Properties.fld_feature_2, Properties.fld_feature_3, Properties.hse_feature_1, Properties.hse_feature_2, Properties.hse_feature_3, Properties.oth_feature_1, Properties.oth_feature_2, Properties.oth_feature_3, Properties.shp_feature_1, Properties.shp_feature_2, Properties.shp_feature_3, Properties.other_property_details, Other_Property_Features.property_id, Other_Property_Features.feature_id, Other_Property_Features.property_feature_description", "target": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"}
